package ejer13_23;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.Line2D.Double;
import java.text.AttributedCharacterIterator;
import java.util.Scanner;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.border.EmptyBorder;




import ejer13_23.Graficos.Estado;

public class GuiGraficos extends JPanel implements ActionListener{

	private JPanel west;
	private JPanel center;
//	private JLabel title;
	private JTextField comands;
	private JButton button;
	private JLabel append;
	private JLabel plumalabel;
	private JLabel posicionlabel;
	private JLabel derechalabel;
	private JLabel abajolabel;
	private JLabel izquierdalabel;
	private JLabel arribalabel;
	
	public enum Estado{ARRIBA, ABAJO, IZQUIERDA, DERECHA}
	Estado apunta;
	boolean pluma;
	int f;		//posición actual x
	int c;		//posición actual y
	int v;		//desplazamiento
	
//	Point posAct;
	String[] Comandos;
    int[][]piso;
    
    private int limup;		//límites de recorrido
	private int limdown;
	private int limder;
	private int limizq;
	
	Scanner input;  	
	boolean val;		//validación entrada
	
	int put;           	//índice del comando en Comandos
	
	
	
	public GuiGraficos() {
		
		setLayout(new BorderLayout());
		
		
		center=new JPanel();
		add(center, BorderLayout.CENTER);
		center.setBorder(new EmptyBorder(10, 10, 10, 10));
		center.setBackground(Color.LIGHT_GRAY);
		center.setOpaque(false);
		
		west=new JPanel(new GridLayout(9, 1, 2, 2));
		add(west, BorderLayout.WEST);
		west.setBorder(new EmptyBorder(10, 10, 10, 10));
		west.setBackground(Color.ORANGE);
		west.setOpaque(true);
		
		comands=new JTextField(4);
		comands.setHorizontalAlignment(SwingConstants.RIGHT);
		west.add(comands, BorderLayout.NORTH);
		
		
		append=new JLabel( "La tortuga apunta a la derecha");
		west.add(append);
		plumalabel=new JLabel("No pinta");
		west.add(plumalabel);
		posicionlabel=new JLabel("Posicion actual es ["+f+"] ["+c+"] ");	
		west.add(posicionlabel);
		derechalabel=new JLabel("Distancia hasta derecha "+  Math.abs(limder-c));
		west.add(derechalabel);
		abajolabel=new JLabel("Distancia hasta abajo "+ Math.abs(limdown-f));
		west.add(abajolabel);
		izquierdalabel=new JLabel("Distancia hasta izquierda "+ Math.abs(limizq-c));
		west.add(izquierdalabel);
		arribalabel=new JLabel("Distancia hasta arriba "+Math.abs(limup-f));
		west.add(arribalabel);
			
		button=new JButton("Ejecutar");
		west.add(button);
		button.setMinimumSize(new Dimension(100, 50));
		button.setMaximumSize(new Dimension(100, 50));
		button.setPreferredSize(new Dimension(100, 50));
		comands.addActionListener(this);
		button.addActionListener(this);
	
		
		
		
		f=0;
    	c=0;

    	apunta=Estado.DERECHA;
    	piso=new int[20][20];
    	pluma=false;
    	Comandos=new String[20];
    	
    	limup=0;
    	limdown=19;
    	limder=19;
    	limizq=0;   	
    	
    	input =new Scanner(System.in);
    	val=false;
    	put=0;
    	
    	
	}
	
	private static void createAndShowGUI() {
	    //Create and set up the window.
	    JFrame frame = new JFrame("Gráficos de tortuga");
	    GuiGraficos panel=new GuiGraficos();
	    frame.add(panel, BorderLayout.CENTER);
	    frame.add(new JLabel("Tortuga waiting comands..."), BorderLayout.NORTH); 
	    panel.setBackground(new Color(95, 180, 0));
	            
	    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    frame.setVisible(true);
//	    frame.setSize(Toolkit.getDefaultToolkit().getScreenSize());
	    frame.setSize(500, 400);	
	    frame.setResizable(false);
	   
	    
	}

	public static void main(String[] args) {
	  
	    javax.swing.SwingUtilities.invokeLater(new Runnable() {
	        public void run() {
	            createAndShowGUI();
	        }
	    });
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		
		if(e.getSource()==comands) {
			
			validar(e);
			comands.setText(null);
			append.setText(" Tortuga apunta a "+ apunta );
			plumalabel.setText(pluma? "Pinta": "No pinta");
			posicionlabel.setText("Posición actual es ["+f+"] ["+c+"] ");
			derechalabel.setText("Distancia hasta derecha "+  Math.abs(limder-c));
			abajolabel.setText("Distancia hasta abajo "+ Math.abs(limdown-f));
			izquierdalabel.setText("Distancia hasta izquierda "+  Math.abs(limizq-c));
			arribalabel.setText("Distancia hasta arriba" +Math.abs(limup-f)) ;
		}
		
		else if(e.getSource()==button) {
			System.out.println("pulsado");
			Comandos[put]="6";
			put++;
			reset();
			ejecutar();
		}
	}
	
	
	public void validar(ActionEvent e) {
		
		
		boolean coma=false;
		if (e.getActionCommand().length()>1&&(e.getActionCommand().charAt(0)=='5')&&(e.getActionCommand().charAt(1)==',')) coma=true;
		
		
		if(e.getActionCommand().equals("1")) { 
			pluma=false;
			Estado();
			Comandos[put]=e.getActionCommand();
			put++;
		}
		else if(e.getActionCommand().equals("2")) { 
			pluma=true;
			Estado();
			Comandos[put]=e.getActionCommand();
			put++;
		}
		else if(e.getActionCommand().equals("3")) { 
			
			derecha();
			Estado();
			Comandos[put]=e.getActionCommand();
			put++;
		}
		else if(e.getActionCommand().equals("4")) { 
			
			izquierda();
			Estado();
			Comandos[put]=e.getActionCommand();
			put++;
		}
		else if(e.getActionCommand().equals("5")) { 
			System.out.print("Para avanzar introduzca 5,xy\n");
			Estado();
		}
		else if(e.getActionCommand().equals("6")) { Comandos[put]=e.getActionCommand();
		put++;
		}
		else if(e.getActionCommand().equals("9")||Comandos[18]!=null) {
			Comandos[19]="6";
			button.doClick();		
		}
		else if((coma)&&(e.getActionCommand().length()==3)){
				if((Integer.parseInt(e.getActionCommand().substring(2, 3))<=9)&&(Integer.parseInt(e.getActionCommand().substring(2, 3))>0)) {
				v=Integer.parseInt(e.getActionCommand().substring(2, 3));
//				System.out.println("3  CORRECTOS");
				if(movimiento()) {Comandos[put]=e.getActionCommand();
				put++;}
				Estado();}
				}
	
		else if((coma)&&(e.getActionCommand().length()==4)){
			
			if((Integer.parseInt(e.getActionCommand().substring(2, 3))==1)&& 
					((Integer.parseInt(e.getActionCommand().substring(3, 4))<=9)&&
						(Integer.parseInt(e.getActionCommand().substring(3, 4))>=0))) {
				v=Integer.parseInt(e.getActionCommand().substring(2, 4));
//				System.out.println("4  CORRECTOS");
				if(movimiento()) {Comandos[put]=e.getActionCommand();
				put++;}
				Estado();}
			else System.out.println("INTRODUZCA DATOS CORRECTOS");
		}
			
		else System.out.println("INTRODUZCA DATOS CORRECTOS POR FAVOR");
		
	}
	

	public void derecha(){
		
		if(apunta==Estado.DERECHA) apunta=Estado.ABAJO;
		else if(apunta==Estado.ABAJO) apunta=Estado.IZQUIERDA;
		else if(apunta==Estado.IZQUIERDA) apunta=Estado.ARRIBA;
		else if(apunta==Estado.ARRIBA) apunta=Estado.DERECHA;
		
	}
	
	public void izquierda(){
		
		if(apunta==Estado.DERECHA) apunta=Estado.ARRIBA;
		else if(apunta==Estado.ARRIBA) apunta=Estado.IZQUIERDA;
		else if(apunta==Estado.IZQUIERDA) apunta=Estado.ABAJO;
		else if(apunta==Estado.ABAJO) apunta=Estado.DERECHA;
		
	}	
	
	public void Estado() {
		
		System.out.println( "La Tortuga apunta a "+ apunta+"\nLa pluma"+ (pluma ? " pinta": " no pinta")
				+ "\nLa posición actual es\t\t\t["+f+"] ["+c+ 
				"]\nLa distancia hasta la derecha es \t"+ Math.abs(limder-c)+"\nLa "
				+ "distancia hasta abajo es \t\t"+ Math.abs(limdown-f)+ "\nLa distancia hasta el muro"
				+ " izquierdo es "+ Math.abs(limizq-c)+ "\nLa distancia hasta arriba es \t\t"+Math.abs(limup-f));
		System.out.println();
				
	}
	
	public boolean movimiento() {
		
		switch(apunta) {
		
		case DERECHA: 	if(v>Math.abs(limder-c)) { System.out.print("Te sales por la derecha\n");
						return false;}
						else {c+=v; 
						System.out.print("Vas bien wey\n");
						return true;
						}
						
		case ABAJO:   	if(v>Math.abs(limdown-f)) { System.out.print("Te sales por abajo\n");
					    return false;}
						else{f+=v; 
						System.out.print("Vas bien wey\n");
						return true;
						}
					    
		case IZQUIERDA: if(v>Math.abs(limizq-c)) { System.out.print("Te sales por la izquierda\n");
						return false;}
						else {c-=v; 
						System.out.print("Vas bien wey\n");
						return true;
						}
						
		case ARRIBA: 	if(v>Math.abs(limup-f)) { System.out.print("Te sales por la arriba\n");
						return false;}
						else{f-=v; 
						System.out.print("Vas bien wey\n");
						return true;
						}
		}
		
		return true;
	}
	
	
	public void avanzar(int v) {
		
		if(apunta==Estado.DERECHA) {
			
			for(int i=0; i<v; i++) piso[f][c+i]=pluma? 1:0;
			c+=v-1;
				
		}
		
		else if(apunta==Estado.ABAJO) {
			
			for(int i=0; i<v; i++) piso[f+i][c]=pluma? 1:0;
			f+=v-1;
			
		}
		
		else if(apunta==Estado.IZQUIERDA) {
			
			for(int i=0; i<v; i++) piso[f][c-i]=pluma? 1:0;
			c-=v-1;
		}
		
		else if(apunta==Estado.ARRIBA) {
			
			for(int i=0; i<v; i++) piso[f-i][c]=pluma? 1:0;
			f-=v-1;
		}
	
	}
	
	public void paintComponent(Graphics g) {

		super.paintComponent(g);
		
		Graphics2D g2=(Graphics2D) g;
	
		for (int i=0; i<piso.length; i++) {
			
			for(int j=0; j<piso[i].length; j++) {
						
				g2.setColor(Color.pink);
				g2.setStroke(new BasicStroke(9));
				
				
			if(piso[i][j]==1) g2.draw(new Line2D.Double(j*10+center.getLocation().getX(), i*10+center.getLocation().getY(),
					j*10+center.getLocation().getX(), i*10+center.getLocation().getY()));
//			if(piso[j][i]==1) g2.fillOval(i*10+101, j*10+10, 10, 10);
			}
		}
		
	}

	public void reset() {
		
		f=0;
		c=0;
		apunta=Estado.DERECHA;
	}
	
	public void ejecutar() {
		
		for(int i=0; i<Comandos.length; i++) {
			
			if(Comandos[i]==null) break;
			
			String comando= Comandos[i].substring(0, 1);
			
		switch(comando) {
		
		case "1": pluma=false;
		break;
				
		case "2": pluma=true;
		break;
		
		case "3": derecha();
		break;
		
		case "4": izquierda();
		break;
		
		case "5":
			
			if(Comandos[i].length()==3)
			avanzar(Integer.parseInt(Comandos[i].substring(2, 3)));
			
			else avanzar(Integer.parseInt(Comandos[i].substring(2, 4)));
		break;
		
		case "6": imprimir(); repaint();
		break;
		
		
			}//fin de switch
    	}//fin for
	}//fin método ejecutar

	 
	public void imprimir() {
		
		piso[0][0]=1;
		
		for (int i=0; i<piso.length; i++) {
			System.out.println();
			for(int j=0; j<piso[i].length; j++)
						
				System.out.print(piso[i][j]==1?"*": " ");}
		
		for (int i=0; i<piso.length; i++) {
			System.out.println();
			for(int j=0; j<piso[i].length; j++)
						
				System.out.print(piso[i][j]);}
	
	}
	
	public void iniciar() {

		System.out.println("Bienvenido a la tortuga pintora. Escriba su selección hasta un máximo de 10 órdenes.\n"
				+ "Para finalizar pulse 9 y su tortuga cerará una obra de arte");
		System.out.println();
		
		
			System.out.println("Escriba un comando: ");
			System.out.println("1:   PLuma arriba (no pinta)");
			System.out.println("2:   Pluma abajo(pinta)");
			System.out.println("3:   Girar a la derecha. ");
			System.out.println("4:   Girar a la izquierda");
			System.out.println("5,n: Avanzar n espacios(max 19).");
		System.out.println("6:   Visionar obra de arte");
		System.out.println("9:   Fin de los comandos");
		
		System.out.println("------->");
		
	
	}
}
