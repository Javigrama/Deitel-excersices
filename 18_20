package e18_21;

public class Labertinto {

	
	private static char[][] laberinto = { 
			{ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' },
			{ '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#' },
			{ '.', '.', '#', '.', '#', '.', '#', '#', '#', '#', '.', '#' },
			{ '#', '#', '#', '.', '#', '.', '.', '.', '.', '#', '.', '#' },
			{ '#', '.', '.', '.', '.', '#', '#', '#', '.', '#', '.', '.' },
			{ '#', '#', '#', '#', '.', '#', '.', '#', '.', '#', '.', '#' },
			{ '#', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#' },
			{ '#', '#', '.', '#', '.', '#', '.', '#', '.', '.', '.', '#' },
			{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#' },
			{ '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#' },
			{ '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#' },
			{ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' } };
	
	private static int[] Starting= {2, 0};
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		laberinto[Starting[0]][Starting[1]]='x';
		recorridoLaberinto(laberinto, Starting);
		
	}
	
	public static void recorridoLaberinto(char[][] maze, int[] start) {
		
		
		
		try {
			Thread.sleep(100);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		boolean meta=false;
		if(Starting[1]==laberinto.length-1) { meta=true; 
		if(meta)
			for(int i=0; i<laberinto.length; i++) {
				for (int j=0; j<laberinto[i].length; j++)
					if(laberinto[i][j]=='0') laberinto[i][j]='.';}
		
		System.out.println("SALIDA");}
		displayLaberinto();
		System.out.println();
		if(!meta)movimiento();
		if(!meta)recorridoLaberinto(laberinto, Starting);
		
		
	}
	
	public static void movimiento() {
		
		if(checkRuta()) { laberinto[Starting[0]][Starting[1]]='x';
		

		}
		else { laberinto[Starting[0]][Starting[1]]='0'; 
		retroceder(); 
		
		}
	
	}
	
	public static boolean retroceder() {
		

		if(laberinto[Starting[0]][Starting[1]-1]=='x')  {Starting[0]=Starting[1]-1;  return true;} //izquierda
		
		else if(laberinto[Starting[0]+1][Starting[1]]=='x') {Starting[0]=Starting[0]+1;  return true;} //abajo
		
		else if(laberinto[Starting[0]-1][Starting[1]]=='x') {Starting[0]=Starting[0]-1;  return true;} //arriba
		
		else if(laberinto[Starting[0]][Starting[1]+1]=='x')  {Starting[1]=Starting[1]+1;  return true;} //derecha
		
		return false;
		
	}
	
	public static boolean checkRuta() {
		
		if(laberinto[Starting[0]][Starting[1]>0? Starting[1]-1: Starting[1]]=='.')  {Starting[1]=Starting[1]-1;  return true;} //izquierda
		
		else if(laberinto[Starting[0]-1][Starting[1]]=='.') {Starting[0]=Starting[0]-1;  return true;} //arriba
		
		else if(laberinto[Starting[0]][Starting[1]+1]=='.')  {Starting[1]=Starting[1]+1;  return true;} //derecha
		
		else if(laberinto[Starting[0]+1][Starting[1]]=='.') {Starting[0]=Starting[0]+1;  return true;} //abajo
		
	
		
		return false;
		
	}
	
	public static void displayLaberinto() {
		
		for(int i=0; i<laberinto.length; i++) {
			System.out.println();
			
			for (int j=0; j<laberinto[i].length; j++)
				System.out.print(laberinto[i][j]+" ");
		}
	}

}
